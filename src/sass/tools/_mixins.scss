@mixin transitionEaseInOut ($duration: 0.3s, $ease: ease-in-out) {
-webkit-transition: all $duration $ease;
-moz-transition: all $duration $ease;
-o-transition: all $duration $ease;
-ms-transition: all $duration $ease;
-khtml-transition: all $duration $ease;
transition: all $duration $ease;
}

// transition linear
@mixin transitionLinear($duration: 0.3s, $linear: linear) {
  -webkit-transition: all $duration $linear;
  -moz-transition: all $duration $linear;
  -o-transition: all $duration $linear;
  -ms-transition: all $duration $linear;
  -khtml-transition: all $duration $linear;
  transition: all $duration $linear;
}

// breakpoint
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin n-columns($min-width, $gutter, $last-equal: false, $max-cols: 5) {
  .o-columns {
    display: flex;
    flex-wrap: wrap;
    margin-left: -$gutter;
    margin-top: -$gutter;

    .o-columns__item {
      flex: 1 0 $min-width;
      margin-left: $gutter;
      margin-top: $gutter;
      &:nth-child(2n+1) {
        border-right: 1px solid #d8d8d8;
      }


      @if $last-equal {
        @for $i from 2 through $max-cols {
          prova: $i;
          $screen-width: ($min-width*$i)+($gutter*$i);
          $column-width: (100%/$i);
          @media (min-width: $screen-width) {
            max-width: calc(#{$column-width} - #{$gutter});
          }
        }

        $column-width: (100%/$max-cols);
        @media (min-width: $min-width*$max-cols) {
            min-width: calc(#{$column-width} - #{$gutter});
        }
      }

    }
  }
}
